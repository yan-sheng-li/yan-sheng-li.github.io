(window.webpackJsonp=window.webpackJsonp||[]).push([[304],{689:function(e,t,s){"use strict";s.r(t);var a=s(0),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"整合redis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整合redis"}},[e._v("#")]),e._v(" 整合Redis")]),e._v(" "),t("h2",{attrs:{id:"一、环境准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、环境准备"}},[e._v("#")]),e._v(" 一、环境准备")]),e._v(" "),t("p",[e._v("在开始整合前，请确保已完成以下准备工作：")]),e._v(" "),t("ol",[t("li",[e._v("已安装Redis服务（"),t("a",{attrs:{href:"https://www.liyansheng.top/blog/install/#12%E3%80%81Redis",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装指南"),t("OutboundLink")],1),e._v("）")]),e._v(" "),t("li",[e._v("创建好Spring Boot项目")])]),e._v(" "),t("h2",{attrs:{id:"二、添加依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、添加依赖"}},[e._v("#")]),e._v(" 二、添加依赖")]),e._v(" "),t("p",[e._v("在项目的"),t("code",[e._v("pom.xml")]),e._v("中添加以下依赖：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\x3c!-- Redis核心依赖 --\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n\n\x3c!-- 连接池依赖 --\x3e\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-pool2</artifactId>\n</dependency>\n")])])]),t("h2",{attrs:{id:"三、配置redis连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、配置redis连接"}},[e._v("#")]),e._v(" 三、配置Redis连接")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("application.yml")]),e._v("中配置Redis连接信息：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("spring:\n  redis:\n    host: 127.0.0.1       # Redis服务器地址\n    port: 6379            # Redis服务器端口\n    password: xxxx        # Redis密码（没有密码可不填）\n    database: 0           # 使用的数据库索引\n    timeout: 5000         # 连接超时时间（毫秒）\n    lettuce:\n      pool:\n        max-active: 8     # 连接池最大连接数\n        max-idle: 8       # 连接池最大空闲连接数\n        min-idle: 0       # 连接池最小空闲连接数\n        max-wait: 1000ms  # 获取连接最大等待时间\n")])])]),t("h2",{attrs:{id:"四、redis操作方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、redis操作方式"}},[e._v("#")]),e._v(" 四、Redis操作方式")]),e._v(" "),t("p",[e._v("Spring Boot提供了两种主要的Redis操作模板：")]),e._v(" "),t("h3",{attrs:{id:"_1-stringredistemplate-推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-stringredistemplate-推荐"}},[e._v("#")]),e._v(" 1. StringRedisTemplate（推荐）")]),e._v(" "),t("p",[e._v("适用于字符串类型的键值操作：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@RestController\n@RequestMapping("/redis")\npublic class RedisController {\n\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    @GetMapping("/set")\n    public String set(@RequestParam String key, @RequestParam String value) {\n        stringRedisTemplate.opsForValue().set(key, value);\n        return "Set success";\n    }\n\n    @GetMapping("/get")\n    public String get(@RequestParam String key) {\n        return stringRedisTemplate.opsForValue().get(key);\n    }\n}\n')])])]),t("h3",{attrs:{id:"_2-redistemplate-对象存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-redistemplate-对象存储"}},[e._v("#")]),e._v(" 2. RedisTemplate（对象存储）")]),e._v(" "),t("p",[e._v("适用于存储Java对象，需要配置序列化：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@Configuration\npublic class RedisConfig {\n\n    @Bean\n    public RedisTemplate<Object, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<Object, Object> template = new RedisTemplate<>();\n        template.setConnectionFactory(factory);\n\n        // 使用JSON序列化器\n        GenericJackson2JsonRedisSerializer jsonSerializer = new GenericJackson2JsonRedisSerializer();\n\n        // 设置序列化方式\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setValueSerializer(jsonSerializer);\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setHashValueSerializer(jsonSerializer);\n\n        template.afterPropertiesSet();\n        return template;\n    }\n}\n")])])]),t("p",[e._v("使用示例：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@Service\npublic class RedisObjectService {\n\n    @Autowired\n    private RedisTemplate<Object, Object> redisTemplate;\n\n    public void saveObject(String key, Object value) {\n        redisTemplate.opsForValue().set(key, value);\n    }\n\n    public Object getObject(String key) {\n        return redisTemplate.opsForValue().get(key);\n    }\n}\n")])])]),t("h2",{attrs:{id:"五、redis数据结构操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、redis数据结构操作"}},[e._v("#")]),e._v(" 五、Redis数据结构操作")]),e._v(" "),t("h3",{attrs:{id:"_1-字符串-string-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-字符串-string-操作"}},[e._v("#")]),e._v(" 1. 字符串(String)操作")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 设置值（带过期时间）\nstringRedisTemplate.opsForValue().set("key", "value", Duration.ofMinutes(10));\n\n// 获取值\nString value = stringRedisTemplate.opsForValue().get("key");\n\n// 删除键\nstringRedisTemplate.delete("key");\n\n// 检查键是否存在\nboolean exists = stringRedisTemplate.hasKey("key");\n')])])]),t("h3",{attrs:{id:"_2-列表-list-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-列表-list-操作"}},[e._v("#")]),e._v(" 2. 列表(List)操作")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 左侧推入元素\nstringRedisTemplate.opsForList().leftPush("taskList", "task1");\n\n// 右侧弹出元素\nString task = stringRedisTemplate.opsForList().rightPop("taskList");\n\n// 获取列表范围\nList<String> tasks = stringRedisTemplate.opsForList().range("taskList", 0, -1);\n')])])]),t("h3",{attrs:{id:"_3-集合-set-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-集合-set-操作"}},[e._v("#")]),e._v(" 3. 集合(Set)操作")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 添加元素\nstringRedisTemplate.opsForSet().add("mySet", "A", "B", "C");\n\n// 获取所有元素\nSet<String> members = stringRedisTemplate.opsForSet().members("mySet");\n\n// 检查元素是否存在\nboolean isMember = stringRedisTemplate.opsForSet().isMember("mySet", "A");\n')])])]),t("h3",{attrs:{id:"_4-哈希-hash-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-哈希-hash-操作"}},[e._v("#")]),e._v(" 4. 哈希(Hash)操作")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 设置哈希字段\nstringRedisTemplate.opsForHash().put("user:1001", "name", "Tom");\n\n// 获取哈希字段\nString name = (String) stringRedisTemplate.opsForHash().get("user:1001", "name");\n\n// 获取所有字段\nMap<Object, Object> user = stringRedisTemplate.opsForHash().entries("user:1001");\n')])])]),t("h3",{attrs:{id:"_5-有序集合-zset-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-有序集合-zset-操作"}},[e._v("#")]),e._v(" 5. 有序集合(ZSet)操作")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 添加元素\nstringRedisTemplate.opsForZSet().add("ranking", "Tom", 100);\n\n// 获取排名\nSet<String> topUsers = stringRedisTemplate.opsForZSet().range("ranking", 0, 2);\n\n// 获取元素分数\nDouble score = stringRedisTemplate.opsForZSet().score("ranking", "Tom");\n')])])]),t("h2",{attrs:{id:"六、最佳实践建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、最佳实践建议"}},[e._v("#")]),e._v(" 六、最佳实践建议")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("连接池配置")]),e._v("：根据应用并发量合理配置连接池参数")]),e._v(" "),t("li",[t("strong",[e._v("键命名规范")]),e._v("：使用冒号分隔的命名空间（如"),t("code",[e._v("user:1001:profile")]),e._v("）")]),e._v(" "),t("li",[t("strong",[e._v("序列化选择")]),e._v("：优先使用StringRedisTemplate处理字符串，复杂对象使用JSON序列化")]),e._v(" "),t("li",[t("strong",[e._v("异常处理")]),e._v("：添加适当的异常处理逻辑")]),e._v(" "),t("li",[t("strong",[e._v("过期时间")]),e._v("：为缓存数据设置合理的过期时间")])]),e._v(" "),t("p",[e._v("通过以上配置和示例，您可以在Spring Boot项目中轻松集成Redis，实现高效的数据缓存和存储功能。")])])}),[],!1,null,null,null);t.default=r.exports}}]);